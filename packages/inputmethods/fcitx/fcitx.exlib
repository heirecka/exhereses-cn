# Copyright 2008-2015 Hong Hao <oahong@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'fcitx-3.5.ebuild', which is:
#    Copyright 1999-2008 Gentoo Foundation

dict_release=20121020
table_release=20121124
download_base="http://download.fcitx-im.org"

pystroke=py_stroke-${table_release}.tar.gz # Stroke Input data for pinyin-enhance
pydata=py_table-${table_release}.tar.gz    # Pinyin data for pinyin-enhance
endict=en_dict-${dict_release}.tar.gz      # English Dictionary for fcitx-spell
require gtk-icon-cache freedesktop-mime cmake [ api=2 out_of_source=false ] checksums [ sha1=[ \
    pinyin.tar.gz=af6f6fceed89a2b533b39a73e277675361298745 \
    ${pydata}=e43d2760a607461ae8a4f52e4caf21cf673f6acc   \
    ${pystroke}=80a52eba30f0ab269e6d26cb2813af9da2e84017 \
    ${endict}=3d6b85cbede261b3703b916e6a1a3303f6cba9a6   \
    table.tar.gz=b7e89f95ce2da991821acd270a1220a4cd4cb65a ] ]
export_exlib_phases src_prepare pkg_postinst pkg_postrm

SUMMARY="A Flexible Input Method Framework"
DESCRIPTION="
Fcitx [ˈfaɪtɪks] is a input method framework with extension support. Currently it supports linux and
Unix system, like freebsd. It has three builtin Input Method Engine, Pinyin, QuWei and Table-based
input methods.

Feature
* Highly modularized (You can even drop all X support, if you only need fbterm based support).
* fbterm support (fcitx-fbterm)
* cloud pinyin support (fcitx-cloudpinyin)
* themable user interface (builtin classic-ui)
* kimpanel based user interface support (builtin kimpanel-ui)
* xlib-only user interface support (fcitx-ui-light)
* libgooglepinyin based pinyin engine (fcitx-googlepinyin)
* sunpinyin based pinyin engine (fcitx-sunpinyin)
* Integrated KDE Configure Tool (kcm-fcitx)
* GTK Based Configure Tool (fcitx-configtool)
Japanese(Anthy based), Koarean(Hangul based), and N9-Meego/Maliit support is under development."
HOMEPAGE="http://fcitx-im.org"
DOWNLOADS="
    ${download_base}/data/table.tar.gz
    ${download_base}/data/pinyin.tar.gz
    ${download_base}/data/${pystroke}
    ${download_base}/data/${pydata}
    ${download_base}/data/${endict}
"

LICENCES="GPL-2"
SLOT="0"
MYOPTIONS="debug dbus gobject-introspection opencc lua
    autostart [[ requires = [ dbus ] description = [ Enable xdg autostart desktop file installation ] ]]
    enchant [[ description = [ Enable enchant for word predication ] ]]
    pango [[ description = [ Enable pango support for better multilingual text rendering ] ]]
    ( gtk gtk3 qt4 ) [[ requires = [ dbus ] ]]"

DEPENDENCIES="
    build:
        dev-util/intltool
        sys-devel/gettext
        virtual/pkg-config
        x11-proto/xorgproto
        kde-frameworks/extra-cmake-modules[>=0.0.11]
    build+run:
        app-text/iso-codes
        dev-libs/libxml2
        x11-libs/cairo[X]
        x11-libs/libX11
        x11-libs/libXinerama
        x11-libs/libXrender
        x11-libs/libxkbfile
        x11-libs/libxkbcommon
        !pango? ( media-libs/fontconfig )
        dbus? ( sys-apps/dbus[>=1.1.0] )
        enchant? ( app-spell/enchant )
        gobject-introspection? ( gnome-desktop/gobject-introspection:1 )
        gtk? (
            dev-libs/dbus-glib
            dev-libs/glib
            x11-libs/gtk+:2
        )
        gtk3? (
            dev-libs/dbus-glib
            dev-libs/glib
            x11-libs/gtk+:3
        )
        lua? ( dev-lang/lua )
        opencc? ( cjk/opencc[>=0.1.1] )
        pango? ( x11-libs/pango )
        qt4? ( x11-libs/qt:4[>=4.5][dbus] )
    recommendation:
        inputmethods/fcitx-configtool
"
# fcitx-config script:
#        xdg-utils / fcitx-config

RESTRICT="test"
UPSTREAM_DOCUMENTATION="http://fcitx.github.com/handbook/fcitx.html [[ lang = zh_CN ]]"

CMAKE_SRC_CONFIGURE_PARAMS=(
    -DENABLE_X11:BOOL=TRUE
    -DENABLE_GLIB2:BOOL=TRUE
    -DENABLE_LIBXML2:BOOL=TRUE
    -DENABLE_PINYIN:BOOL=TRUE
    -DENABLE_TABLE:BOOL=TRUE
    -DENABLE_PRESAGE:BOOL=FALSE
    -DENABLE_TEST:BOOL=TRUE
    -DCMAKE_INSTALL_PREFIX:PATH=/usr
    -DLIB_INSTALL_DIR:PATH=/usr/$(exhost --target)/lib
    -DSYSCONFDIR:PATH=/etc
)

CMAKE_SRC_CONFIGURE_OPTION_ENABLES=(
    'autostart XDGAUTOSTART'
    'dbus DBUS'
    'debug DEBUG'
    'enchant ENCHANT'
    'gobject-introspection GIR'
    'gtk GTK2_IM_MODULE'
    'gtk3 GTK3_IM_MODULE'
    'lua LUA'
    'opencc OPENCC'
    'pango PANGO'
    'qt4 QT'
    'qt4 QT_GUI'
    'qt4 QT_IM_MODULE'
)

update_gtk_immodules() {
    option gtk && gtk-query-immodules-2.0 --update-cache
    option gtk3 && gtk-query-immodules-3.0 --update-cache
}

fcitx_src_prepare() {
    cmake_src_prepare

    edo sed -e "s#\${package}#${PNVR}#" -i doc/CMakeLists.txt

    # dirty hack for multiarch:
    edo sed -e "/^set(includedir/s#/include#/$(exhost --target)&#" \
        -e "/^set(bindir/s#/bin#/$(exhost --target)&#" \
        -e '/UseDoxygen/d' \
        -i CMakeLists.txt
    edo sed -e "/FCITX_INCLUDEDIR/s#\${CMAKE_INSTALL_PREFIX}#&/$(exhost --target)#" \
        -e "s#share/locale#/usr/&#g" \
        -i cmake/FcitxMacro.cmake

    for d in ${pydata} ${pystroke}; do
        edo cp "${FETCHEDDIR}"/${d} src/module/pinyin-enhance/data
    done
    edo cp "${FETCHEDDIR}"/pinyin.tar.gz src/im/pinyin/data
    edo cp "${FETCHEDDIR}"/${endict} src/module/spell/dict
    edo cp "${FETCHEDDIR}"/table.tar.gz src/im/table/data
}

fcitx_pkg_postinst() {
    update_gtk_immodules
    freedesktop-mime_pkg_postinst
    gtk-icon-cache_pkg_postinst
}

fcitx_pkg_postrm() {
    update_gtk_immodules
    freedesktop-mime_pkg_postrm
    gtk-icon-cache_pkg_postrm
}

